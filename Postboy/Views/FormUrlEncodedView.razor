@using System.Web
@using System.Linq
@using Postboy.Helpers
@using Postboy.Constants
@inject IMessageService Notification

@if (Value is not null)
{
    for (var idx = 0; idx < _formData.Count; idx++)
    {
        var index = idx;
        var kv = _formData[idx];
        if (string.IsNullOrWhiteSpace(kv.key) && string.IsNullOrWhiteSpace(kv.value))
        {
            continue;
        }
        <GridRow Gutter="16" Justify="left" Align="top" Style=@($"margin-bottom:{Constants.MarginBottomNormal}px;")>
            <GridCol Span="4">
                <Input Placeholder="Key" @bind-Value=kv.key OnChange=@((string v) => OnInput(index, (v, kv.value)))/>
            </GridCol>
            <GridCol Span="10">
                <Input Placeholder="Value" @bind-Value=kv.value OnChange=@((string v) => OnInput(index, (kv.key, v)))/>
            </GridCol>
            <GridCol Span="1">
                <Button OnClick="() => RemoveEntry(kv)" Danger>
                    <Icon Type="minus"/>
                </Button>
            </GridCol>
        </GridRow>
    } 
    <GridRow Gutter="16" Justify="left" Align="top">
        <GridCol Span="4">
            <Input Placeholder="Key" @bind-Value=_newEntry.key/>
        </GridCol>
        <GridCol Span="10">
            <Input Placeholder="Value" @bind-Value=_newEntry.value/>
        </GridCol>
        <GridCol Span="1">
            <Button Type="@ButtonType.Primary" OnClick="AddEntry">
                <Icon Type="plus" />
            </Button>
        </GridCol>
    </GridRow>
}
else
{
    <Icon Type="loading" Theme="outline" Style="font-size: 24px" Spin />
}

