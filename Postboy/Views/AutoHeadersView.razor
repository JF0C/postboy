@using Services.AutoHeaderParser

@inject IRequestStorageService Storage
@inject IRequestExecutorService Executor

<Panel>
    <HeaderTemplate>
        <Space>
            <SpaceItem>
                Auto Headers
            </SpaceItem>
            <SpaceItem>
                <Badge Count=@(Value?.Count ?? 0) />
            </SpaceItem>
        </Space>
    </HeaderTemplate>
    <ChildContent>
        @if (Value is not null && _requests is not null)
        {
            @foreach (var header in Value)
            {
                    <GridRow Gutter="16" Justify="left" Align="top" Style=@($"margin-bottom:{Constants.MarginBottomNormal}px;")>

                        <GridCol Span="3">
                            <Select TItemValue="Guid"
                                TItem="AutoHeaderRepresentation"
                                LabelName="@nameof(AutoHeaderRepresentation.Name)"
                                ValueName="@nameof(AutoHeaderRepresentation.Guid)"
                                DataSource="_autoHeaders"
                        @bind-Value=header.Type
                        OnSelectedItemChanged=@((r) => Changed()) />
                        </GridCol>
                        <GridCol Span="6">
                            <Select TItemValue="Guid"
                                TItem="StoredRequest"
                                LabelName="@nameof(StoredRequest.Name)"
                                ValueName="@nameof(StoredRequest.Id)"
                                DataSource="_requests"
                                @bind-Value=header.RequestId
                                OnSelectedItemChanged=@((r) => Changed())
                            />
                        </GridCol>
                        <GridCol Span="1">
                            <Button Danger OnClick="@(() => RemoveAutoHeader(header))">
                                <Icon Type="minus"/>
                            </Button>
                        </GridCol>
                    </GridRow>
            }
            <GridRow Gutter="16" Justify="left" Align="top">
                @if (_autoHeaders is not null)
                {
                    <GridCol Span="3">
                        <Select TItemValue="Guid"
                            TItem="AutoHeaderRepresentation"
                            ValueName="@nameof(AutoHeaderRepresentation.Guid)"
                            LabelName="@nameof(AutoHeaderRepresentation.Name)"
                            DataSource="_autoHeaders"
                            @bind-Value=_newItem.Type
                            OnSelectedItemChanged=@((r) => Changed())
                        />
                    </GridCol>
                }
                <GridCol Span="6">
                    <Select TItemValue="Guid"
                    TItem="StoredRequest"
                    LabelName="@nameof(StoredRequest.Name)"
                    ValueName="@nameof(StoredRequest.Id)"
                    DataSource="_requests"
                    @bind-Value=_newItem.RequestId />
                </GridCol>
                <GridCol Span="3">
                    <Button Type="@ButtonType.Primary" OnClick="AddAutoRequest">
                        <Icon Type="plus" />
                    </Button>
                </GridCol>
            </GridRow>
        }
        else
        {
            <Icon Type="loading" Theme="outline" Style="font-size: 24px" Spin />
        }
    </ChildContent>
</Panel>

@code {
    [Parameter]
    public List<AutoHeader>? Value { get; set; }

    [Parameter]
    public EventCallback<List<AutoHeader>> ValueChanged { get; set; }

    private List<StoredRequest>? _requests;

    private AutoHeader _newItem = new();

    private List<AutoHeaderRepresentation>? _autoHeaders;

    private class AutoHeaderRepresentation
    {
        public string Name { get; set; } = string.Empty;
        public Guid Guid { get; set; } = Guid.Empty;
    }

    protected override async Task OnInitializedAsync()
    {
        _autoHeaders = Executor.AutoHeaders.Select(a => new AutoHeaderRepresentation{ Name = a.Name, Guid = a.Guid }).ToList();
        _requests = await Storage.GetAll();
        await base.OnInitializedAsync();
    }

    private void Changed()
    {
        ValueChanged.InvokeAsync(Value);
    }

    private void AddAutoRequest()
    {
        var newitem = new AutoHeader
        {
            RequestId = _newItem.RequestId,
            Type = _newItem.Type
        };
        _newItem = new();
        Value?.Add(newitem);
        ValueChanged.InvokeAsync(Value);
    }
    private void RemoveAutoHeader(AutoHeader header)
    {
        Value?.Remove(header);
        ValueChanged.InvokeAsync(Value);
    }
}
