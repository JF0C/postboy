@using Constants
@inject IRequestStorageService Storage
@inject IComponentInteractionService Interaction
@inject ModalService Modal

<SubMenu IsOpen=@(Folder?.IsOpen ?? false) @ref=_subMenu>
    <TitleTemplate>
        @if(Folder is null)
        {
            <Icon Type="loading" Theme="outline" Style="font-size: 24px" Spin />
        }
        else
        {
            <span>
                <Icon Type=@(_subMenu.IsOpen ? "folder-open" : "folder")/>
                <span>@(Level == 0 ? "Folders" : Folder.Name)</span>
                <Dropdown Style="float:right;">
                    <Overlay>
                        <Menu>
                            @if (Level > 0)
                            {
                                <MenuItem OnClick="EditTitle">
                                    <span>
                                        <Icon Type="edit" />
                                        <span>Edit Name</span>
                                    </span>
                                </MenuItem>
                            }
                            @if (Level < 2)
                            {
                                <MenuItem OnClick="@(() => AddFolder(Folder.Id))">
                                    <span>
                                        <Icon Type="folder-add" />
                                        <span>Add Folder</span>
                                    </span>
                                </MenuItem>
                            }
                            <MenuItem OnClick="@(() => AddRequest(Folder.Id))">
                                <span>
                                    <Icon Type="plus" />
                                    <span>Add Request</span>
                                </span>
                            </MenuItem>
                            @if (Level > 0)
                            {
                                <MenuItem OnClick="@(() => Delete(Folder.Id))">
                                    <span>
                                        <Icon Type="delete" />
                                        <span>Delete</span>
                                    </span>
                                </MenuItem>
                            }
                        </Menu>
                    </Overlay>
                    <ChildContent>
                        <a>
                            <Icon Type="more" />
                        </a>
                    </ChildContent>
                </Dropdown>
            </span>
        }
    </TitleTemplate>
    <ChildContent>
        @if(Folder is null)
        {
            <Icon Type="loading" Theme="outline" Style="font-size: 24px" Spin />
        }
        else
        {
            @foreach (var subfoler in Folder.Folders)
            {
                <FoldersView Folder="subfoler" Level="@(Level+1)"/>
            }
            @foreach (var rid in Folder.RequestIds)
            {
                var request = GetById(rid);
                @if (request is not null)
                {
                    var link = $"/Request/{request.Name}";
                    <Tooltip Placement=@Placement.Right MouseEnterDelay="1">
                        <TitleTemplate>
                            <Tooltip Title="Remove from folder">
                                <Button Danger Size="@ButtonSize.Small" OnClick="@(() => RemoveRequest(Folder.Id, request.Id))">
                                    <Icon Type="close" />
                                </Button>
                            </Tooltip>
                            @request.Name
                        </TitleTemplate>
                        <ChildContent>
                            <MenuItem Style=@($"width:{Constants.MenuWidth}px;") RouterLink=@link>
                                <Icon Type="code" />
                                @request.Name
                            </MenuItem>
                        </ChildContent>
                    </Tooltip>
                }
            }
        }
    </ChildContent>
</SubMenu>

<EditFoldernameModal @ref=_folderName />
<AddRequestToFolderModal @ref=_addRequest />

@code {
    [Parameter]
    public Folder? Folder { get; set; }

    [Parameter]
    public int Level { get; set; }

    private SubMenu? _subMenu;

    private EditFoldernameModal? _folderName;

    private AddRequestToFolderModal? _addRequest;

    private List<StoredRequest>? _requests;

    protected override async Task OnInitializedAsync()
    {
        _requests = await Storage.GetAll();
        await base.OnInitializedAsync();
    }

    private async Task EditTitle()
    {
        if (_folderName is null) return;
        _folderName.Done = new EventCallback<string>(this, async (string name) =>
        {
            if (name is null) return;
            await Storage.RenameFolder(Folder.Id, name);
            Interaction.Notify("menuchanged");
        });
        _folderName.Show(Folder.Name);
    }
    private async Task AddFolder(Guid folderId)
    {
        if (_folderName is null) return;
        _folderName.Done = new EventCallback<string>(this, async (string name) =>
        {
            if (name is null) return;
            await Storage.CreateFolder(folderId, name);
            Interaction.Notify("menuchanged");
        });
        _folderName.Show("new folder");
    }
    private async Task Delete(Guid folderId)
    {
        if (await Modal.ConfirmAsync(new ConfirmOptions
            {
                Title = "Delete Folder",
                Content = $"Are you sure, that you want to delete the folder {Folder?.Name} and all its contents?"
            }))
        {
            await Storage.DeleteFolder(Folder.Id);
            Interaction.Notify("menuchanged");
        }
    }
    private async Task AddRequest(Guid folderId)
    {
        if (_addRequest is null) return;
        _addRequest.Done = new EventCallback<Guid?>(this, async (Guid? id) =>
        {
            if (id is null) return;
            await Storage.AddRequestToFolder(folderId, id.Value);
            Interaction.Notify("menuchanged");
        });
        _addRequest.Show();
    }
    private async Task RemoveRequest(Guid folderId, Guid requestId)
    {
        await Storage.RemoveRequestFromFolder(folderId, requestId);
        Interaction.Notify("menuchanged");
    }
    private StoredRequest? GetById(Guid id)
    {
        return _requests?.FirstOrDefault(r => r.Id == id);
    }
}
